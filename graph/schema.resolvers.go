package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/dominika232323/token-transfer-api/internal/db"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

// Transfer is the resolver for the transfer field.
func (r *mutationResolver) Transfer(ctx context.Context, fromAddress string, toAddress string, amount int32) (int32, error) {
	database := r.Resolver.DB
	var updatedBalance int32

	if amount < 0 {
		return 0, fmt.Errorf("amount cannot be negative")
	}

	err := database.Transaction(func(tx *gorm.DB) error {
		var sender db.Wallet

		if err := tx.Clauses(clause.Locking{Strength: "UPDATE"}).
			FirstOrCreate(&sender, db.Wallet{Address: fromAddress}).Error; err != nil {
			return fmt.Errorf("failed to find or create sender: %v", err)
		}

		if sender.Balance < int64(amount) {
			return fmt.Errorf("Insufficient balance")
		}

		sender.Balance -= int64(amount)

		if err := tx.Save(&sender).Error; err != nil {
			return fmt.Errorf("failed to update sender balance: %v", err)
		}

		var recipient db.Wallet

		if err := tx.Clauses(clause.Locking{Strength: "UPDATE"}).
			FirstOrCreate(&recipient, db.Wallet{Address: toAddress}).Error; err != nil {
			return fmt.Errorf("failed to find or create recipient: %v", err)
		}

		recipient.Balance += int64(amount)

		if err := tx.Save(&recipient).Error; err != nil {
			return fmt.Errorf("failed to update recipient balance: %v", err)
		}

		updatedBalance = int32(sender.Balance)

		return nil
	})

	if err != nil {
		return 0, err
	}

	return updatedBalance, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
